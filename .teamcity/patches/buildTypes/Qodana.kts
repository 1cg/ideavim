package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.Qodana
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.qodana
import jetbrains.buildServer.configs.kotlin.v2019_2.failureConditions.BuildFailureOnMetric
import jetbrains.buildServer.configs.kotlin.v2019_2.failureConditions.failOnMetricChange
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.ScheduleTrigger
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.VcsTrigger
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.schedule
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.vcs
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'Qodana'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("Qodana")) {
    expectSteps {
        qodana {
            name = "Qodana"
            reportAsTestsEnable = ""
            failBuildOnErrors = ""
            codeInspectionXmlConfig = "Custom"
            codeInspectionCustomXmlConfigPath = ".idea/inspectionProfiles/Qodana.xml"
        }
    }
    steps {
        update<Qodana>(0) {
            clearConditions()
            reportAsTestsEnable = "true"
            param("clonefinder-languages", "Java")
            param("clonefinder-mode", "")
            param("report-version", "")
            param("clonefinder-languages-container", "Java Kotlin")
            param("namesAndTagsCustom", "repo.labs.intellij.net/static-analyser/qodana")
            param("clonefinder-queried-project", "src")
            param("clonefinder-enable", "true")
            param("clonefinder-reference-projects", "src")
            param("yaml-configuration", "")
        }
    }

    triggers {
        val trigger1 = find<VcsTrigger> {
            vcs {
                branchFilter = ""
            }
        }
        trigger1.apply {
            enabled = false
            clearBuildParams()
        }
        add {
            schedule {
                schedulingPolicy = weekly {
                    dayOfWeek = ScheduleTrigger.DAY.Tuesday
                }
                branchFilter = ""
                triggerBuild = always()
            }
        }
    }

    failureConditions {
        val feature1 = find<BuildFailureOnMetric> {
            failOnMetricChange {
                threshold = 0
                units = BuildFailureOnMetric.MetricUnit.DEFAULT_UNIT
                comparison = BuildFailureOnMetric.MetricComparison.MORE
                compareTo = value()
                param("metricKey", "QodanaProblemsTotal")
            }
        }
        feature1.apply {
            metric = BuildFailureOnMetric.MetricType.TEST_FAILED_COUNT
        }
    }
}
